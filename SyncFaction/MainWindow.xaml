<Window Name="TheWindow" x:Class="SyncFaction.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:SyncFaction" xmlns:mdxam="clr-namespace:MdXaml;assembly=MdXaml" xmlns:jsonLinq="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:factionFiles="clr-namespace:SyncFaction.Core.Services.FactionFiles;assembly=SyncFaction.Core" xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase" xmlns:fa="http://schemas.fontawesome.io/icons/"
        xmlns:converters="clr-namespace:SyncFaction.Converters"
        xmlns:dd="urn:gong-wpf-dragdrop"
        ContentRendered="MainWindow_OnContentRendered"
        mc:Ignorable="d" Title="SyncFaction" Height="450" MinHeight="450" Width="1000" MinWidth="1000" Icon="/icon.png" Closing="MainWindow_OnClosing" d:DataContext="{d:DesignInstance Type=local:ViewModel, IsDesignTimeCreatable=True}" d:DesignHeight="700">
    <Window.Resources>
        <Style x:Key="ButtonStyle" TargetType="Button">
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="MinWidth" Value="150" />
            <Setter Property="Height" Value="20" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Margin" Value="10,10,10,10" />
        </Style>
        <converters:MethodToValueConverter x:Key="MethodToValueConverter" />
        <converters:BoolShowCollapseConverter x:Key="BoolShowCollapseConverter" />
        <converters:CategoryHumanReadableConverter x:Key="CategoryConverter" />
        <converters:TabSelectedByTypeConverter x:Key="TabSelectedByTypeConverter" />
        <converters:TabSelectedByTypeVisibilityConverter x:Key="TabSelectedByTypeVisibilityConverter" />
        <HierarchicalDataTemplate DataType="{x:Type jsonLinq:JArray}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Array" />
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jsonLinq:JProperty}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Property name: " />
                <TextBlock Text="{Binding Path=Name, Mode=OneWay}" />
            </StackPanel>
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jsonLinq:JObject}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Object" />
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jsonLinq:JConstructor}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Constructor" />
        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type jsonLinq:JRaw}" ItemsSource="{Binding Converter={StaticResource MethodToValueConverter}, ConverterParameter='Children'}">
            <TextBlock Text="Raw" />
        </HierarchicalDataTemplate>
        <DataTemplate DataType="{x:Type jsonLinq:JValue}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Value: " />
                <TextBox Text="{Binding Path=Value, Mode=TwoWay}" />
            </StackPanel>
        </DataTemplate>
        <CollectionViewSource x:Key="OnlineModViewSource" Source="{Binding OnlineMods}" IsLiveGroupingRequested="True">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="Category" >
                    <PropertyGroupDescription.GroupNames>
                        <!-- manually controlled categories, displayed even when empty, and in given order -->
                        <factionFiles:Category>Local</factionFiles:Category>
                        <factionFiles:Category>MapPacks</factionFiles:Category>
                        <factionFiles:Category>MapsStandalone</factionFiles:Category>
                        <factionFiles:Category>MapsPatches</factionFiles:Category>
                        <factionFiles:Category>ModsRemaster</factionFiles:Category>
                    </PropertyGroupDescription.GroupNames>
                </PropertyGroupDescription>
            </CollectionViewSource.GroupDescriptions>
            <CollectionViewSource.SortDescriptions>
                <componentModel:SortDescription PropertyName="Name" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
        <CollectionViewSource x:Key="LocalModViewSource" Source="{Binding LocalMods}" IsLiveGroupingRequested="True">
            <CollectionViewSource.GroupDescriptions>
                <PropertyGroupDescription PropertyName="Status" >
                    <PropertyGroupDescription.GroupNames>
                        <!-- manually controlled categories, displayed even when empty, and in given order -->
                        <local:LocalModStatus>Enabled</local:LocalModStatus>
                        <local:LocalModStatus>Disabled</local:LocalModStatus>
                    </PropertyGroupDescription.GroupNames>
                </PropertyGroupDescription>
            </CollectionViewSource.GroupDescriptions>
        </CollectionViewSource>
        <Style TargetType="ListViewItem">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="IsSelected" Value="{Binding Selected}" />
        </Style>
        <Style x:Key="GridViewHeaderStyle" TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Visibility" Value="Visible" />
            <Setter Property="Width" Value="Auto"></Setter>
        </Style>
        <Style x:Key="ModListGroupCollapsibleHeader" TargetType="GroupItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Expander IsExpanded="True">
                            <Expander.Header>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Name}" />
                                    <TextBlock Text=" (" />
                                    <TextBlock Text="{Binding ItemCount}" />
                                    <TextBlock Text=")" />
                                </StackPanel>
                            </Expander.Header>
                            <ItemsPresenter />
                        </Expander>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="TabItem">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="TabItem">
                        <Grid Name="Panel">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="4" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter TargetName="Panel" Property="Background" Value="{x:Static local:ViewModel.Highlight}" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Panel" Property="Background" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="TabControlTemplate" TargetType="TabControl">
            <DockPanel Margin="0">
                <UniformGrid IsItemsHost="True" Rows="1" DockPanel.Dock="Top" />
                <Border BorderThickness="0 1 0 0" BorderBrush="LightGray" DockPanel.Dock="Top" />
                <ContentPresenter ContentSource="SelectedContent" />
            </DockPanel>

        </ControlTemplate>
        <BooleanToVisibilityConverter x:Key="BoolToVis" />
        <converters:EmptyStringShowCollapseConverter x:Key="EmptyStrShowCollapse" />
        <converters:BoolShowHideConverter x:Key="BoolShowHide" />
        <converters:ModStatusConverter x:Key="ModStatusConverter" />

    </Window.Resources>
    <Grid x:Name="MainGrid"
          ShowGridLines="{Binding GridLines}">
        <Grid.RowDefinitions>
            <!-- resizable markdown -->
            <RowDefinition Height="*" />
            <!-- main buttons -->
            <RowDefinition Height="Auto" />
            <!-- game directory input -->
            <RowDefinition Height="Auto" />
            <!-- links, loader and cancel button -->
            <RowDefinition Height="Auto" />
            <!-- hidden devMode controls -->
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <!-- lego mason -->
            <ColumnDefinition Width="40*" />
            <!-- for labels -->
            <ColumnDefinition Width="25*" />
            <!-- for inputs -->
            <ColumnDefinition Width="100*" />
            <!-- tabs lists -->
            <ColumnDefinition Width="40*" />
        </Grid.ColumnDefinitions>
        <Grid
                   Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
        >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <mdxam:MarkdownScrollViewer
                xml:space="preserve"
                x:Name="Markdown"
                Margin="5,0,0,0"
                Grid.Column="0"
                VerticalScrollBarVisibility="Visible">
		# Markdown example
		# Markdown example
		# Markdown example
		# Markdown example
	    </mdxam:MarkdownScrollViewer>
            <TextBox
                Visibility="{Binding DisplayModSettings, Converter={StaticResource BoolShowCollapseConverter}}"
                VerticalScrollBarVisibility="Visible"
                Grid.Column="1"
                MinWidth="300"
                DockPanel.Dock="Right"
                Background="LightGray">Mod settings will be here (if any)</TextBox>
        </Grid>

        <Label
            Grid.Row="3" Grid.Column="2"
            Width="60"
            Background="{x:Static local:ViewModel.Highlight}"
            HorizontalContentAlignment="Center"
            VerticalContentAlignment="Center"
            HorizontalAlignment="Right"
            VerticalAlignment="Center"
            Visibility="{Binding Model.DevMode, Converter={StaticResource BoolShowHide}, ConverterParameter=true}">
            <TextBlock TextAlignment="Center" xml:space="preserve">Warranty
void!</TextBlock>
        </Label>
        <fa:ImageAwesome
            Name="Spinner"
            Grid.Column="3" Grid.Row="3"
            Width="25" Margin="10,5,10,5"
            HorizontalAlignment="Right"
            Icon="Gear" Spin="True"
            SpinDuration="5" Visibility="{Binding Interactive, Converter={StaticResource BoolShowHide}, ConverterParameter=false}" />
        <Grid
            Name="Failure"
            Visibility="{Binding Failure, Converter={StaticResource BoolShowHide}, ConverterParameter=true}"
            Grid.Column="3" Grid.Row="3"
            Width="25"
            Height="25"
            Margin="10,5,10,5"
            HorizontalAlignment="Left">
            <!--FontAwesome icons are just symbols with transparent background. Need a hack to fill background under ! sign-->
            <fa:ImageAwesome
                Icon="Exclamation"
                Width="25"
                Height="15"
                Margin="0 2 0 0"
                Foreground="Black"/>
            <fa:ImageAwesome
                Icon="ExclamationTriangle"
                Foreground="{x:Static local:ViewModel.Highlight}"/>
        </Grid>

        <Button Grid.Column="3" Grid.Row="3"
                x:Name="Cancel" Content="Cancel"
                MinWidth="100"
                Width="100"
                Style="{StaticResource ButtonStyle}"
                Command="{Binding CancelCommand}" />

        <Label Grid.Column="3" Grid.Row="2" Name="CurrentOperation"
               Content="{Binding CurrentOperation}"
               VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10,0,10,0" Foreground="DarkGray" />

        <TabControl Grid.Row="0" Grid.Column="3" Grid.RowSpan="2" Padding="0"
                    Margin="3 0 0 0"
                    SelectedIndex="{Binding SelectedTab}"
                    Name="Tabs" Template="{StaticResource TabControlTemplate}">
            <TabItem Header="Download" Name="DownloadItem"
                     IsSelected="{Binding SelectedTab, Converter={StaticResource TabSelectedByTypeConverter}}"
                     >
                <ListView Name="OnlineModList" ItemsSource="{Binding Source={StaticResource OnlineModViewSource}, Mode=OneWay}" SelectionMode="Multiple">
                    <ListView.GroupStyle>
                        <GroupStyle ContainerStyle="{StaticResource ModListGroupCollapsibleHeader}" />
                    </ListView.GroupStyle>
                    <ListView.View>
                        <GridView ColumnHeaderContainerStyle="{StaticResource GridViewHeaderStyle}">
                            <GridViewColumn Header="" Width="20">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type local:OnlineModViewModel}">
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="{Binding Status, Converter={StaticResource ModStatusConverter}, ConverterParameter=Download}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Header="Name" Width="Auto">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type local:OnlineModViewModel}">
                                        <TextBlock HorizontalAlignment="Stretch" Text="{Binding Name}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>
            </TabItem>
            <TabItem Header="Apply" Name="ApplyItem"
                     IsSelected="{Binding SelectedTab, Converter={StaticResource TabSelectedByTypeConverter}, ConverterParameter=Apply}"
                     >
                <Grid Background="#FFE5E5E5" >
                    <ListView Name="LocalModList"
                              ItemsSource="{Binding Source={StaticResource LocalModViewSource}, Mode=OneWay}"
                              SelectionMode="Multiple"
                              dd:DragDrop.IsDragSource="True"
                              dd:DragDrop.IsDropTarget="True"
                              dd:DragDrop.DropHandler="{Binding DropHandler}"
                              dd:DragDrop.SelectDroppedItems="False"
                              dd:DragDrop.UseDefaultEffectDataTemplate="True"
                              >

                        <ListView.GroupStyle>
                            <GroupStyle ContainerStyle="{StaticResource ModListGroupCollapsibleHeader}" />
                        </ListView.GroupStyle>
                        <ListView.View>
                            <GridView ColumnHeaderContainerStyle="{StaticResource GridViewHeaderStyle}">
                                <GridViewColumn Header="" Width="20">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate DataType="{x:Type local:LocalModViewModel}">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding Order}" />
                                            </StackPanel>
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                                <GridViewColumn Header="Name" Width="Auto">
                                    <GridViewColumn.CellTemplate>
                                        <DataTemplate DataType="{x:Type local:LocalModViewModel}">
                                            <TextBlock HorizontalAlignment="Stretch" Text="{Binding Name}" />
                                        </DataTemplate>
                                    </GridViewColumn.CellTemplate>
                                </GridViewColumn>
                            </GridView>
                        </ListView.View>
                    </ListView>
                </Grid>
            </TabItem>
        </TabControl>
        <Image Grid.Column="0" HorizontalAlignment="Center" Grid.RowSpan="3" Grid.Row="1" Stretch="Uniform" VerticalAlignment="Bottom" MaxHeight="135" Source="/lego.png" />
        <StackPanel Orientation="Horizontal" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" Height="60" Grid.ColumnSpan="2">
            <Button x:Name="Run" Content="Run Game"
                    Style="{StaticResource ButtonStyle}"
                    Visibility="{Binding UpdateNotRequired,Converter={StaticResource BoolToVis}}" Command="{Binding RunCommand}" />
            <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel Orientation="Vertical"
                            Visibility="{Binding UpdateNotRequired,Converter={StaticResource BoolToVis}}">
                    <Button x:Name="Download"
                            Style="{StaticResource ButtonStyle}"
                            MinWidth="200" MinHeight="40"
                            Visibility="{Binding SelectedTab, Converter={StaticResource TabSelectedByTypeVisibilityConverter}, ConverterParameter=Download}"
                            Command="{Binding DownloadCommand}" >
                        <StackPanel Orientation="Horizontal">
                            <TextBlock>Download&#038;Unpack Selected (</TextBlock>
                            <TextBlock Text="{Binding SelectedCount}"></TextBlock>
                            <TextBlock>)</TextBlock>
                        </StackPanel>
                    </Button>
                    <Button x:Name="Apply"
                            Style="{StaticResource ButtonStyle}"
                            MinWidth="200" MinHeight="40"
                            Visibility="{Binding SelectedTab, Converter={StaticResource TabSelectedByTypeVisibilityConverter}, ConverterParameter=Apply}"
                            Command="{Binding ApplyCommand}" >
                        <StackPanel Orientation="Horizontal">
                            <TextBlock>Apply Selected (</TextBlock>
                            <TextBlock Text="{Binding SelectedCount}"></TextBlock>
                            <TextBlock>)</TextBlock>
                        </StackPanel>
                    </Button>
                </StackPanel>

                <Button x:Name="Update" Content="Update to latest Community Patch"
                        MinWidth="200" MinHeight="40"
                        Style="{StaticResource ButtonStyle}"
                        Visibility="{Binding UpdateRequired,Converter={StaticResource BoolToVis}}" Command="{Binding UpdateCommand}" />
            </StackPanel>
                <Button x:Name="Refresh" Content="Refresh"
                        Style="{StaticResource ButtonStyle}"
                        Visibility="{Binding UpdateNotRequired,Converter={StaticResource BoolToVis}}" Command="{Binding RefreshCommand}" />
        </StackPanel>
        <Label VerticalAlignment="Center" Content="Game directory" Grid.Row="2" Grid.Column="1" />


        <Grid Grid.Row="2" Grid.Column="2">
            <TextBox
                x:Name="Directory" TextWrapping="NoWrap" Text="{Binding Model.GameDirectory, UpdateSourceTrigger=PropertyChanged}" MinWidth="100" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" HorizontalScrollBarVisibility="Hidden" IsEnabled="True"
                />
            <TextBlock IsHitTestVisible="False" Text="" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,0,0,0" Foreground="DarkGray">
                To avoid manually locating game every time, put app .exe inside game dir
                <TextBlock.Style>
                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Text, ElementName=Directory}" Value="">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>

        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="1" Grid.Row="3" Grid.ColumnSpan="2">
            <TextBlock Margin="10,10,10,10">
                ▷&#160;Join&#160;
                <Hyperlink Command="NavigationCommands.GoToPage" CommandParameter="https://discord.gg/factionfiles">FactionFiles Discord</Hyperlink>
            </TextBlock>
            <TextBlock Margin="10,10,10,10">
                ▷&#160;
                <Hyperlink Command="NavigationCommands.GoToPage" CommandParameter="https://github.com/Rast1234/SyncFaction">GitHub page</Hyperlink>
                &#160;for feedback
            </TextBlock>
            <WrapPanel Margin="10,10,10,10">
                <TextBlock>▷ Dev mode&#160;</TextBlock>
                <CheckBox x:Name="DevMode" VerticalAlignment="Bottom" IsChecked="{Binding Model.DevMode}" />
            </WrapPanel>
        </StackPanel>
        <GridSplitter Grid.Column="3"
                      Grid.Row="0"
                      Grid.RowSpan="2"
                      HorizontalAlignment="Left"
                      VerticalAlignment="Stretch"
                      Background="LightGray"
                      ShowsPreview="true"
                      Width="3"/>
        <Grid Name="DevModeGrid" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="4" Visibility="{Binding Model.DevMode,Converter={StaticResource BoolToVis}}" IsVisibleChanged="DevModeGrid_OnIsVisibleChanged" SizeChanged="DevModeGrid_OnSizeChanged" >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="50*" />
                <ColumnDefinition Width="50*" />
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Vertical" HorizontalAlignment="Left" Margin="10">

                    <CheckBox Margin="10" IsChecked="{Binding UpdateRequired}" Content="Update required" />
                    <CheckBox Margin="10" IsChecked="{Binding Interactive}" Content="Interactive" />
                    <CheckBox Margin="10" IsChecked="{Binding Model.Multithreading}" >
                        <StackPanel Orientation="Horizontal">
                            <TextBlock>Multithreading (</TextBlock>
                            <TextBlock Text="{Binding Model.ThreadCount}"></TextBlock>
                            <TextBlock>)</TextBlock>
                        </StackPanel>
                    </CheckBox>
                    <Button x:Name="Init" Content="Repeat app initialization"
                            Style="{StaticResource ButtonStyle}"
                            Command="{Binding InitCommand}" />
                    <Label HorizontalAlignment="Center">Open directories:</Label>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <Button Content="&lt;root&gt;" MinWidth="10" Margin="0,10,0,10" Padding="2,0,2,0" Style="{StaticResource ButtonStyle}" Command="{Binding OpenDirCommand}" CommandParameter="" />
                        <Button Content="/data" MinWidth="10" Margin="0,10,0,10" Padding="2,0,2,0" Style="{StaticResource ButtonStyle}" Command="{Binding OpenDirCommand}" CommandParameter="data" />
                        <Button Content="/.syncfaction" MinWidth="10" Margin="0,10,0,10" Padding="2,0,2,0" Style="{StaticResource ButtonStyle}" Command="{Binding OpenDirCommand}" CommandParameter="data/.syncfaction" />
                    </StackPanel>
                    <Button x:Name="Test" Content="Test"
                            Style="{StaticResource ButtonStyle}"
                            Command="{Binding TestCommand}" />

            </StackPanel>
            <TextBox Grid.Row="0" Grid.Column="1" Background="LightGray"
                     HorizontalAlignment="Stretch"
                     VerticalAlignment="Stretch"
                     ScrollViewer.CanContentScroll="True"
                     IsReadOnly="True"
                     HorizontalScrollBarVisibility="Visible"
                     VerticalScrollBarVisibility="Visible"
                     Name="DebugText" Text="{Binding JsonView, Mode=OneWay}"
                     MinHeight="300"
                     MaxHeight="300"
                     Height="300"
                     />

        </Grid>
    </Grid>
</Window>
